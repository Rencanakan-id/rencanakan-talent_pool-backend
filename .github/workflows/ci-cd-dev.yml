name: Java CI/CD Pipeline DEV

on:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - dev

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "21"
          cache: "gradle"

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Make gradlew executable
        run: chmod +x ./gradlew
      - name: Build with Gradle
        run: |
          ./gradlew assemble
      # (Optional) Add steps for running tests and generating reports

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: java-app
          path: build/libs/*.jar

  test:
    name: Test and Analysis
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "21"
          cache: "gradle"
      - name: Make gradlew executable
        run: chmod +x ./gradlew
      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Test with Gradle
        run: |
          ./gradlew check --info --stacktrace
          ./gradlew test
          ./gradlew jacocoTestReport

      - name: Run SonarQube analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./gradlew sonar -Dsonar.projectKey=Rencanakan-id_rencanakan-talent_pool-backend -Dsonar.organization=rencanakan-id -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=${{ secrets.SONAR_TOKEN }} -Dsonar.coverage.jacoco.xmlReportPaths=build/reports/jacoco/test/jacocoTestReport.xml

  publish:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: java-app
      - name: Run Trivy Config Scan (CIS Benchmark)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          exit-code: '1'
          severity: 'HIGH,CRITICAL'
      - name: export buildkit
        run: export DOCKER_BUILDKIT=1
      - name: Build Docker Image
        run: |
          docker build -t rencanakan_talent_pool:latest .
      - name: Run Trivy Image Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'rencanakan_talent_pool:latest'
          format: 'table'
          exit-code: '1'
          severity: 'HIGH,CRITICAL'
      - name: Save Docker Image as Tar File
        run: |
          docker save rencanakan_talent_pool:latest -o myapp.tar
      - name: check directory
        run: ls -al
      - name: create ssh key
        run: echo "${{ secrets.SSH_PRIVATE_KEY_STAGING }}" > ssh-key.pem
      - name: update permission
        run: chmod 400 ssh-key.pem
      - name: Transfer Image to Server via SCP
        run: |
          scp -o StrictHostKeyChecking=no -i ssh-key.pem myapp.tar ${{ secrets.SERVER_USER_STAGING }}@${{ secrets.SERVER_IP_DEV }}:~/myapp.tar

  deploy:
    name: Deploy to GCP
    runs-on: ubuntu-latest
    needs: publish
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install SSH client
        run: sudo apt-get install openssh-client

      - name: create ssh key
        run: echo "${{ secrets.SSH_PRIVATE_KEY_STAGING }}" > ssh-key.pem

      - name: update permission
        run: chmod 400 ssh-key.pem
      - name: Deploy to Server
        run: |
          ssh -o StrictHostKeyChecking=no -i ssh-key.pem ${{ secrets.SERVER_USER_STAGING }}@${{ secrets.SERVER_IP_DEV }} << 'EOF'
            docker stop talent_pool || true
            docker rm talent_pool || true
            docker rmi rencanakan_talent_pool:latest || true
            docker load -i ~/myapp.tar
            docker run --name talent_pool -d -p 80:8080 rencanakan_talent_pool:latest
          EOF