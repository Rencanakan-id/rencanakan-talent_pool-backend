name: Java CI/CD Pipeline STAGING

on:
  push:
    branches:
      - staging
  pull_request:
    branches:
      - staging

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "21"
          cache: "gradle"

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Make gradlew executable
        run: chmod +x ./gradlew
      - name: Build with Gradle
        run: |
          ./gradlew assemble
      # (Optional) Add steps for running tests and generating reports

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: java-app
          path: build/libs/*.jar

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "21"
          cache: "gradle"
      - name: Make gradlew executable
        run: chmod +x ./gradlew
      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Test with Gradle
        run: |
          # ./gradlew check --info --stacktrace
          # ./gradlew test
          # ./gradlew jacocoTestReport
          echo "Skipping tests because DB is not available yet"
      # (Optional) Add steps for generating coverage report and other post-test tasks

  publish:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: check directory
        run: ls -al
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: java-app
      - name: check directory
        run: ls -al
      - name: export buildkit
        run: export DOCKER_BUILDKIT=1
      - name: Get latest tag from Git
        run: |
          TAG_NAME=$(git describe --tags `git rev-list --tags --max-count=1`)
          echo "Latest tag is: $TAG_NAME"
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV
      - name: Build Docker image
        run: |
          docker build \
            --build-arg PRODUCTION=${{ secrets.PRODUCTION }} \
            --build-arg JDBC_DATABASE_PASSWORD=${{ secrets.JDBC_DATABASE_PASSWORD }} \
            --build-arg JDBC_DATABASE_URL=${{ secrets.JDBC_DATABASE_URL }} \
            --build-arg JDBC_DATABASE_USERNAME=${{ secrets.JDBC_DATABASE_USERNAME }} \
            --build-arg JWT_KEY=${{ secrets.JWT_KEY }} \
            -t rencanakan_talent_pool:${{ env.TAG_NAME }} .

      - name: Save Docker Image (version) as Tar File
        run: docker save rencanakan_talent_pool:${{ env.TAG_NAME }} -o myapp_${{ env.TAG_NAME }}.tar

      - name: Check directory
        run: ls -al

      - name: Create SSH key
        run: echo "${{ secrets.SSH_PRIVATE_KEY_STAGING }}" > ssh-key.pem

      - name: Update permission
        run: chmod 400 ssh-key.pem

      - name: Transfer Images to Server via SCP
        run: |
          scp -o StrictHostKeyChecking=no -i ssh-key.pem myapp_${{ env.TAG_NAME }}.tar ${{ secrets.SERVER_USER_STAGING }}@${{ secrets.SERVER_IP_STAGING }}:~/myapp_${{ env.TAG_NAME }}.tar

  deploy:
    name: Deploy to GCP
    runs-on: ubuntu-latest
    needs: publish
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install SSH client
        run: sudo apt-get install openssh-client

      - name: create ssh key
        run: echo "${{ secrets.SSH_PRIVATE_KEY_STAGING }}" > ssh-key.pem 

      - name: update permission
        run: chmod 400 ssh-key.pem
      - name: Deploy to Server
        run: |
          ssh -o StrictHostKeyChecking=no -i ssh-key.pem ${{ secrets.SERVER_USER_STAGING }}@${{ secrets.SERVER_IP_STAGING }} << EOF
            docker stop talent_pool || true
            docker rm talent_pool || true
            docker rmi rencanakan_talent_pool:${{ env.TAG_NAME }} || true
            docker load -i ~/myapp_${{ env.TAG_NAME }}.tar
            docker run --name talent_pool -d -p 8080:8080 rencanakan_talent_pool:${{ env.TAG_NAME }}
            rm ~/myapp_${{ env.TAG_NAME }}.tar
          EOF
