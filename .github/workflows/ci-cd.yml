name: Django CI/CD

on:
  push:
    branches:
      - dev
      - staging
      - main
  pull_request:
    branches:
      - dev
      - staging
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    # services:
    #   postgres:
    #     image: postgres:latest
    #     env:
    #       POSTGRES_DB: test_db
    #       POSTGRES_USER: test_user
    #       POSTGRES_PASSWORD: test_password
    #     ports:
    #       - 5432:5432
    #     options: >-
    #       --health-cmd "pg_isready -U test_user -d test_db"
    #       --health-interval 10s
    #       --health-timeout 5s
    #       --health-retries 5

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install Dependencies
        run: |
          pip install -r requirements.txt
      - name: Run Tests with Coverage
        run: |
          pytest --version
          pytest --cov=. --cov-report=xml
            
      # - name: Run Migrations
      #   env:
      #     DATABASE_URL: {DB_HOST}
      #   run: |
      #     source env/bin/activate
      #     python manage.py migrate

     
  sonar_scan:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK 17 (Required by SonarQube)
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Run SonarQube Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    
        run: |
          curl -sSLo sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
          unzip sonar-scanner.zip
          export PATH=$PWD/sonar-scanner-5.0.1.3006-linux/bin:$PATH
          sonar-scanner \
            -Dsonar.projectKey=Rencanakan-id_rencanakan-talent_pool-backend\
            -Dsonar.organization=rencanakan-id\
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=$SONAR_TOKEN \
            -Dsonar.python.coverage.reportPaths=coverage.xml

  deploy_dev:
    if: github.ref == 'refs/heads/dev'
    needs:  [test, sonar_scan]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Deploy to Production Server
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY_STAGING }}
          SERVER_IP: ${{ secrets.SERVER_IP_DEV }}
          SERVER_USER: ${{ secrets.SERVER_USER_STAGING }}
        run: |
          echo "$SSH_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          ssh -o StrictHostKeyChecking=no -i private_key.pem $SERVER_USER@$SERVER_IP << EOF
            set -e  
            
            echo "current user"
            whoami

            echo "curr dir"
            pwd
            
            if [ ! -d "./rencanakan-talent_pool-backend" ]; then
              git clone -b dev https://github.com/Rencanakan-id/rencanakan-talent_pool-backend.git
            fi
            cd ./rencanakan-talent_pool-backend
            git pull origin dev
        

   
            docker stop rencanakan_talent_pool || true
            docker rm rencanakan_talent_pool || true

       
            docker build -t rencanakan_talent_pool .

   
            docker run -d -p 8000:8000 --name rencanakan_talent_pool rencanakan_talent_pool
          EOF

  deploy_staging:
    if: github.ref == 'refs/heads/staging'
    needs:  [test, sonar_scan]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Deploy to Staging Server
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY_STAGING }}
          SERVER_IP: ${{ secrets.SERVER_IP_STAGING }}
          SERVER_USER: ${{ secrets.SERVER_USER_STAGING }}
        run: |
          echo "$SSH_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          ssh -o StrictHostKeyChecking=no -i private_key.pem $SERVER_USER@$SERVER_IP << EOF
            set -e  
            
            echo "current user"
            whoami

            echo "curr dir"
            pwd
            
            if [ ! -d "./rencanakan-talent_pool-backend" ]; then
              git clone -b staging https://github.com/Rencanakan-id/rencanakan-talent_pool-backend.git
            fi
            cd ./rencanakan-talent_pool-backend
            git pull origin staging
        

   
            docker stop rencanakan_talent_pool || true
            docker rm rencanakan_talent_pool || true

       
            docker build -t rencanakan_talent_pool .

   
            docker run -d -p 8000:8000 --name rencanakan_talent_pool rencanakan_talent_pool
          EOF

  deploy_production:
    if: github.ref == 'refs/heads/main'
    needs:  [test, sonar_scan]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Deploy to Production Server
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY_PROD }}
          SERVER_IP: ${{ secrets.SERVER_IP_PROD }}
          SERVER_USER: ${{ secrets.SERVER_USER_PROD }}
        run: |
          echo "$SSH_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          ssh -o StrictHostKeyChecking=no -i private_key.pem $SERVER_USER@$SERVER_IP << EOF
            set -e  
            
            echo "current user"
            whoami

            echo "curr dir"
            pwd
            
            if [ ! -d "./rencanakan-talent_pool-backend" ]; then
              git clone -b main https://github.com/Rencanakan-id/rencanakan-talent_pool-backend.git
            fi
            cd ./rencanakan-talent_pool-backend
            git pull origin main
        

   
            docker stop rencanakan_talent_pool || true
            docker rm rencanakan_talent_pool || true

       
            docker build -t rencanakan_talent_pool .

   
            docker run -d -p 8000:8000 --name rencanakan_talent_pool rencanakan_talent_pool
          EOF
